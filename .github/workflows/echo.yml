# experiment with workflow_dispatch and custom command with issue_comment

name: CI

on:
  issue_comment:

  workflow_dispatch:
    inputs:
      repo:
        description: Fork to benchmark "user/repo", empty denotes current repo
        type: string
        default: ''
      ref:
        description: Git branch/tag/reference to benchmark, empty denotes current branch
        type: string
        default: ''

jobs:
  build-pr:
    if: github.event.issue.pull_request
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo "${{ toJSON(github.event) }}"

  build-comment:
    if: |
      (github.event.issue.pull_request && contains(github.event.comment.body, '/run-benchmark')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      # necessary to comment on the issue
      issues: write
      pull-requests: write

    steps:
      # # alternate implementation with shell commands
      # - name: Find ref
      #   id: find-ref
      #   run: |
      #     printf "REF=%s" $(curl ${{ github.event.issue.pull_request.url }} 2> /dev/null | jq -r .head.ref) >> "$GITHUB_OUTPUT"
      # - uses: actions/checkout@v4
      #   with:
      #     ref: ${{ steps.find-ref.outputs.REF }}
      # - name: Show top commit
      #   id: git-commit
      #   run: |
      #     { echo 'COMMIT<<EOF'; git log -1; echo EOF; } >> "$GITHUB_OUTPUT"
      - uses: actions/github-script@v6
        id: find-ref
        with:
          script: |
            if (context.eventName == 'pull_request') {
                const pr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number
                })
                core.setOutput('repo', pr.data.head.repo.full_name)
                core.setOutput('ref', pr.data.head.ref)
            }
            if (context.eventName == 'workflow_dispatch') {
                if ('${{inputs.repo}}' == "" && ["", "main"].includes('${{inputs.ref}}')) {
                    core.setFailed("cannot run benchmark against current repo's main")
                }
                core.setOutput('repo', '${{ inputs.repo }}')
                core.setOutput('ref', '${{ inputs.ref }}')
            }
      - name: PR repo-ref
        run: echo ${{ steps.find-ref.outputs.repo }} ${{ steps.find-ref.outputs.ref }}
      - uses: actions/checkout@v4
        with:
          repository: ${{ steps.find-ref.outputs.repo }}
          ref: ${{ steps.find-ref.outputs.ref }}
      - name: Show top commit
        id: git-commit
        run: |
          { echo 'COMMIT<<EOF'; git log -1; echo EOF; } >> "$GITHUB_OUTPUT"
          { echo '```'; sed -e '1d;$d' "$GITHUB_OUTPUT"; echo '```'; } >> $GITHUB_STEP_SUMMARY
      - uses: actions/github-script@v6
        if: github.event.issue.pull_request
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `\`\`\`\n${{ steps.git-commit.outputs.COMMIT }}\n\`\`\``
            })
